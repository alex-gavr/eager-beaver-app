'use client';
import { SetStateAction, useState } from 'react';
import Button from '@/components/buttons/button';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { InputExternalState, TextAreaExternalState } from '@/components/input/InputExternalState';
import { TFaq, insertFaqSchema } from '@/db/schemas';
import { v4 as uuid } from 'uuid';
import FAQComponent from '@/components/faq/faq-component';

interface ITeacherProps {}

const defaultQuestion = '–ö–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∑–∞—É–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å';
const defaultDescription =
  '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —à–∫–æ–ª—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤. –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã: 6 –ª–µ—Ç. –í–∞–ª–µ—Ä–∏—è –º–æ–∂–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ª—é–±–æ–≥–æ —É—á–µ–Ω–∏–∫–∞. –ù–∞ –µ—ë –∑–∞–Ω—è—Ç–∏—è—Ö –¥–µ—Ç–∏ –≤—Å–µ–≥–¥–∞ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã.';

const Faq = ({}: ITeacherProps) => {
  const [question, setQuestion] = useState<string>(defaultQuestion);
  const [description, setDescription] = useState<string>(defaultDescription);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const data: TFaq = {
      uuid: uuid(),
      question,
      description,
    };

    const validatedDate = await toast.promise(
      insertFaqSchema.parseAsync(data),
      {
        pending: '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–π...',
        success: '–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã üëç',
        error: '–û—à–∏–±–∫–∞ ü§Ø',
      },
      {
        autoClose: 5000,
        theme: 'dark',
      },
    );

    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: process.env.NEXT_PUBLIC_API_ROUTE_SECRET,
      },
      body: JSON.stringify(validatedDate),
    };

    const res = await toast
      .promise(
        fetch('/api/admin/add/faq', options),
        {
          pending: '–î–æ–±–∞–≤–ª—è–µ–º faq...',
          success: '–£—Å–ø–µ—Ö! –í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω ü•∞',
          error: '–û—à–∏–±–∫–∞ ü§Ø',
        },
        {
          autoClose: 5000,
          theme: 'dark',
        },
      )
      .then((res) => res.json());

    console.log(res);
    if (res.status === 200) {
      setQuestion('–ï—â–µ –∫–∞–∫–∏–µ –Ω–∏–±—É–¥—å –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å?)');
      setDescription(defaultDescription);
    }
    if (res.status === 500 || res.status === 400) {
      toast.error('–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', {
        theme: 'dark',
      });
    }
  };

  const inputs = [
    {
      id: 1,
      name: 'question',
      label: '–í–æ–ø—Ä–æ—Å',
      type: 'text',
      value: question,
      onChange: (e: { target: { value: SetStateAction<string> } }) => setQuestion(e.target.value),
      required: true,
      placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å',
      inputType: 'input',
      classNameDiv: 'w-full',
    },
    {
      id: 2,
      name: 'description',
      label: '–û–ø–∏—Å–∞–Ω–∏–µ',
      type: 'textarea',
      value: description,
      onChange: (e: { target: { value: SetStateAction<string> } }) => setDescription(e.target.value),
      required: true,
      placeholder: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
      inputType: 'textarea',
    },
  ];

  return (
    <>
      <h1 className='mb-8 text-center text-4xl'>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è</h1>
      <div className='flex w-full flex-col flex-nowrap items-center justify-center gap-10 p-2 md:flex-row '>
        <form
          className='z-50 order-2 flex w-full min-w-[300px] max-w-[400px] flex-col items-start justify-start rounded-xl bg-violet-200 p-4'
          onSubmit={handleSubmit}
        >
          {inputs.map((input) => {
            return input.inputType === 'input' ? (
              <InputExternalState
                label={input.label}
                name={input.name}
                value={input.value}
                type={input.type}
                placeholder={input.placeholder}
                onChange={input.onChange}
                key={input.id}
                id={input.name}
                classNameDiv={input.classNameDiv}
              />
            ) : (
              <TextAreaExternalState
                label={input.label}
                name={input.name}
                value={input.value}
                type={input.type}
                placeholder={input.placeholder}
                onChange={input.onChange}
                key={input.id}
                id={input.name}
              />
            );
          })}
          <Button variant={'primary'} disabled={false} className='my-6 place-self-center'>
            –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å / –æ—Ç–≤–µ—Ç
          </Button>
        </form>
        <div className='flex w-full flex-col items-center justify-center'>
          <FAQComponent question={question} description={description} />
        </div>
      </div>
    </>
  );
};

export default Faq;
