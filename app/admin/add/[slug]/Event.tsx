'use client';
import { ChangeEvent, useEffect, useState } from 'react';
import Button from '@/components/buttons/button';
import { ToastContainer, toast } from 'react-toastify';
import { InputExternalState, TextAreaExternalState } from '@/components/input/InputExternalState';
import { TFutureEvents, insertFutureEventsSchema } from '@/db/schemas';
import { v4 as uuid } from 'uuid';
import EventCard from '@/components/future-events/event-card/EventCard';

interface IReviewProps {}
const millisecondsPerDay = 1000 * 60 * 60 * 24;
const defaultEventName = '–õ—É—á—à–∏–µ —Å–æ–±—ã—Ç–∏–µ –≥–æ–¥–∞';
const defaultEventDescription =
  '–ù–∞ —ç—Ç–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–µ –º–æ–∂–Ω–æ –æ—â—É—Ç–∏—Ç—å –¥—É—Ö –±–µ–∑—É–¥–µ—Ä–∂–Ω–æ–≥–æ –≤–µ—Å–µ–ª—å—è –∏ —Å–≤–æ–±–æ–¥—ã. –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–º–æ–π –≤–µ—á–µ—Ä–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–æ —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏, –∫—Ä–∞—Å–æ—á–Ω—ã–º–∏ —Ñ–æ–Ω–∞—Ä—è–º–∏ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏—è–º–∏. –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –ª—é–¥–µ–π —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –∏ –ø–µ—Ç—å –≤–º–µ—Å—Ç–µ.';
const defaultAge = '–æ—Ç 6 –ª–µ—Ç';
const defaultParticipants = 0;
const defaultSpots = 8;
const defaultPrice = '5000 —Ä—É–±–ª–µ–π';
const defaultEventStart = '2022/12/12';
const defaultEventEnd = '2022/12/12';
const defaultEventEndMoreThanStart = '2022/12/20';

const Event = ({}: IReviewProps) => {
  const [eventName, setEventName] = useState<string>(defaultEventName);
  const [description, setDescription] = useState<string>(defaultEventDescription);
  const [age, setAge] = useState<string>(defaultAge);
  const [participants, setParticipants] = useState<number>(defaultParticipants);
  const [totalSpots, setTotalSpots] = useState<number>(defaultSpots);
  const [durationLongerThanDay, setDurationLongerThanDay] = useState<boolean>(false);
  const [eventStart, setEventStart] = useState<string>(defaultEventStart);
  const [evenStartDate, setEventStartDate] = useState<Date>(new Date(eventStart));
  const [eventEnd, setEventEnd] = useState<string>(defaultEventEnd);
  const [eventEndDate, setEventEndDate] = useState<Date>(new Date(eventEnd));
  const [price, setPrice] = useState<string>(defaultPrice);

  useEffect(() => {
    setEventStartDate(new Date(eventStart));
    setEventEndDate(new Date(eventEnd));
  }, [eventStart, eventEnd]);

  useEffect(() => {
    if (evenStartDate) {
      const daysDiff =
        Math.floor((evenStartDate.getTime() - eventEndDate.getTime()) / millisecondsPerDay) + 1;
      if (daysDiff < 0 && !durationLongerThanDay) {
        toast('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 1 –¥–Ω—è? –ü–æ—Å—Ç–∞–≤—å –≥–∞–ª–∫—É –≤—ã—à–µ, –µ—Å–ª–∏ –¥–∞ üòá', {
          theme: 'dark',
        });
      }
    }
  }, [evenStartDate, eventEndDate]);

  const handleToggle = () => {
    if (!durationLongerThanDay) {
      setDurationLongerThanDay(true);
      setEventStart(defaultEventEndMoreThanStart);
      setEventEnd(defaultEventEnd);
    }
    if (durationLongerThanDay) {
      setDurationLongerThanDay(false);
      setEventStart(defaultEventStart);
      setEventEnd(defaultEventEnd);
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const eventS = new Date(eventStart);
    const eventE = new Date(eventEnd);

    const data: TFutureEvents = {
      uuid: uuid(),
      eventName,
      description,
      age,
      participants,
      totalSpots,
      eventStart: eventS,
      eventEnd: eventE,
      durationLongerThanDay,
      price,
    };

    const validatedDate = await toast.promise(
      insertFutureEventsSchema.parseAsync(data),
      {
        pending: '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–π...',
        success: '–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç üëç',
        error: '–û—à–∏–±–∫–∞ ü§Ø',
      },
      {
        autoClose: 5000,
        theme: 'dark',
      },
    );

    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: process.env.NEXT_PUBLIC_API_ROUTE_SECRET,
      },
      body: JSON.stringify(validatedDate),
    };

    const res = await toast
      .promise(
        fetch('/api/admin/add/future-event', options),
        {
          pending: '–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ...',
          success: '–£—Å–ø–µ—Ö! –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ü•∞',
          error: '–û—à–∏–±–∫–∞ ü§Ø',
        },
        {
          autoClose: 5000,
          theme: 'dark',
        },
      )
      .then((res) => res.json());

    if (res.status === 200) {
      setEventName(defaultEventName);
      setDescription(defaultEventDescription);
      setAge(defaultAge);
      setParticipants(defaultParticipants);
      setTotalSpots(defaultSpots);
      setEventStart(defaultEventStart);
      setEventEnd(defaultEventEnd);
      setDurationLongerThanDay(false);
      setPrice(defaultPrice);
    }
    if (res.status === 500 || res.status === 400) {
      toast.error('–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', {
        theme: 'dark',
      });
    }
  };

  const inputsText = [
    {
      id: 1,
      label: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è',
      name: 'eventName',
      value: eventName,
      type: 'text',
      placeholder: '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è',
      onChange: (e: ChangeEvent<HTMLInputElement>) => setEventName(e.target.value),
      inputType: 'input',
      className: '',
      required: true,
    },
    {
      id: 2,
      label: '–í–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–æ–∫',
      name: 'age',
      value: age,
      type: 'text',
      placeholder: '–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–æ–∫',
      onChange: (e: ChangeEvent<HTMLInputElement>) => setAge(e.target.value),
      inputType: 'input',
      className: '',
      required: true,
    },
    {
      id: 3,
      label: '–°—Ç–æ–∏–º–æ—Å—Ç—å',
      name: 'price',
      value: price,
      type: 'text',
      placeholder: '–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å',
      onChange: (e: ChangeEvent<HTMLInputElement>) => setPrice(e.target.value),
      inputType: 'input',
      className: '',
      required: true,
    },
  ];

  const textarea = {
    id: 2,
    label: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è',
    name: 'description',
    value: description,
    type: 'text',
    placeholder: '–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è',
    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => setDescription(e.target.value),
    inputType: 'textarea',
    className: '',
    required: true,
  };

  const dates = [
    {
      id: 1,
      label: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞',
      name: 'eventStart',
      value: eventStart,
      type: durationLongerThanDay ? 'date' : 'datetime-local',
      placeholder: '–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞',
      onChange: (e: ChangeEvent<HTMLInputElement>) => setEventStart(e.target.value),
      inputType: 'input',
      className: '',
      required: true,
    },
    {
      id: 2,
      label: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
      name: 'eventEnd',
      value: eventEnd,
      type: durationLongerThanDay ? 'date' : 'datetime-local',
      placeholder: '–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è',
      onChange: (e: ChangeEvent<HTMLInputElement>) => setEventEnd(e.target.value),
      inputType: 'input',
      className: '',
      required: true,
    },
  ];

  const numbers = [
    {
      id: 4,
      label: '–£–ñ–ï —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
      name: 'participants',
      value: participants,
      type: 'number',
      placeholder: '–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      onChange: (e: ChangeEvent<HTMLInputElement>) => setParticipants(e.target.valueAsNumber),
      inputType: 'input',
      className: '',
      required: true,
    },
    {
      id: 5,
      label: '–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
      name: 'totalSpots',
      value: totalSpots,
      type: 'number',
      placeholder: '–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      onChange: (e: ChangeEvent<HTMLInputElement>) => setTotalSpots(e.target.valueAsNumber),
      inputType: 'input',
      className: '',
      required: true,
    },
  ];

  return (
    <>
      <h1 className='mb-8 text-center text-4xl'>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞</h1>
      <div className='flex w-full flex-col flex-nowrap items-center justify-center gap-10 p-2 md:flex-row '>
        <form
          className='z-50 order-2 flex w-full min-w-[300px] max-w-[600px] flex-col items-start justify-start rounded-xl bg-violet-200 p-4'
          onSubmit={handleSubmit}
        >
          <div className='flex w-full flex-row flex-wrap items-center justify-center'>
            {inputsText.map((input, index) => (
              <InputExternalState
                id={input.name}
                key={input.id}
                label={input.label}
                name={input.name}
                value={input.value}
                type={input.type}
                placeholder={input.placeholder}
                onChange={input.onChange}
                className={input.className}
              />
            ))}
          </div>
          <TextAreaExternalState
            id={textarea.name}
            key={textarea.id}
            label={textarea.label}
            name={textarea.name}
            value={textarea.value}
            type={textarea.type}
            placeholder={textarea.placeholder}
            onChange={textarea.onChange}
            className={textarea.className}
          />

          <div className='flex w-full flex-row items-center justify-center gap-4'>
            <label
              htmlFor='durationLongerThanDay'
              className='block text-base font-medium leading-6 text-gray-900 sm:text-lg md:text-xl lg:text-2xl'
            >
              –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ 1 –¥–Ω—è?
            </label>
            <input
              type='checkbox'
              name='durationLongerThanDay'
              id='durationLongerThanDay'
              className='h-5 w-5 rounded border-2 border-indigo-500 text-indigo-600 focus:ring-indigo-600  lg:h-7 lg:w-7'
              checked={durationLongerThanDay}
              onChange={handleToggle}
            />
          </div>

          <div className='flex w-full flex-row flex-wrap items-center justify-center'>
            {/* TODO: DATES */}
            {dates.map((date, index) => (
              <InputExternalState
                id={date.name}
                key={date.id}
                label={date.label}
                name={date.name}
                value={date.value}
                type={date.type}
                placeholder={date.placeholder}
                onChange={date.onChange}
                className={date.className}
              />
            ))}
          </div>
          <div className='flex w-full flex-row flex-wrap items-center justify-center'>
            {numbers.map((number) => (
              <InputExternalState
                id={number.name}
                key={number.id}
                label={number.label}
                name={number.name}
                value={number.value}
                type={number.type}
                placeholder={number.placeholder}
                onChange={number.onChange}
                className={number.className}
              />
            ))}
          </div>

          <div className='flex w-full flex-col items-center justify-center'>
            <Button
              variant={'primary'}
              disabled={eventStart === defaultEventStart || eventEnd === defaultEventEnd}
              className='my-6 place-self-center '
            >
              –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
            </Button>
          </div>
        </form>
        <div className='flex flex-1 flex-col items-center justify-start '>
          <EventCard
            uuid='1'
            eventName={eventName}
            description={description}
            age={age}
            participants={participants}
            totalSpots={totalSpots}
            eventStart={evenStartDate}
            eventEnd={eventEndDate}
            durationLongerThanDay={durationLongerThanDay}
            price={price}
            disabled
          />
        </div>
      </div>
      <ToastContainer />
    </>
  );
};

export default Event;
